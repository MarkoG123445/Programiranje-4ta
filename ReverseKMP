#include <iostream>
#include <vector>
#include <string>

class MyString {
public:
    MyString(const std::string& str) : data(str) {}

   
    size_t length() const {
        return data.length();
    }

    
    char operator[](size_t index) const {
        return data[index];
    }

  
    const std::string& get() const {
        return data;
    }

private:
    std::string data;
};


std::vector<int> computeLPS(const MyString& pattern) {
    int m = pattern.length();
    std::vector<int> lps(m, 0);
    int len = 0; 
    int i = 1;

    while (i < m) {
        if (pattern[i] == pattern[len]) {
            len++;
            lps[i] = len;
            i++;
        } else {
            if (len != 0) {
                len = lps[len - 1];
            } else {
                lps[i] = 0;
                i++;
            }
        }
    }

    return lps;
}


std::vector<int> reverseKMP(const MyString& text, const MyString& pattern) {
    int n = text.length();
    int m = pattern.length();
    std::vector<int> lps = computeLPS(pattern);
    std::vector<int> result;

    int i = n - 1; 
    int j = m - 1; 

    while (i >= 0) {
        if (text[i] == pattern[j]) {
            i--;
            j--;
        }

        if (j < 0) {
            result.push_back(i + 1);
            j = lps[j]; 
        } else if (i >= 0 && text[i] != pattern[j]) {
            if (j != m - 1) {
                j = lps[j];
            } else {
                i--;
            }
        }
    }

    return result;
}

int main() {
    MyString text("ababcababcabc");
    MyString pattern("abc");

    std::vector<int> matches = reverseKMP(text, pattern);

    std::cout << "Pattern found at indices: ";
    for (int index : matches) {
        std::cout << index << " ";
    }
    std::cout << std::endl;

    return 0;
}#include <iostream>
#include <vector>
#include <string>

class MyString {
public:
    MyString(const std::string& str) : data(str) {}

   
    size_t length() const {
        return data.length();
    }

    
    char operator[](size_t index) const {
        return data[index];
    }

  
    const std::string& get() const {
        return data;
    }

private:
    std::string data;
};


std::vector<int> computeLPS(const MyString& pattern) {
    int m = pattern.length();
    std::vector<int> lps(m, 0);
    int len = 0; 
    int i = 1;

    while (i < m) {
        if (pattern[i] == pattern[len]) {
            len++;
            lps[i] = len;
            i++;
        } else {
            if (len != 0) {
                len = lps[len - 1];
            } else {
                lps[i] = 0;
                i++;
            }
        }
    }

    return lps;
}


std::vector<int> reverseKMP(const MyString& text, const MyString& pattern) {
    int n = text.length();
    int m = pattern.length();
    std::vector<int> lps = computeLPS(pattern);
    std::vector<int> result;

    int i = n - 1; 
    int j = m - 1; 

    while (i >= 0) {
        if (text[i] == pattern[j]) {
            i--;
            j--;
        }

        if (j < 0) {
            result.push_back(i + 1);
            j = lps[j]; 
        } else if (i >= 0 && text[i] != pattern[j]) {
            if (j != m - 1) {
                j = lps[j];
            } else {
                i--;
            }
        }
    }

    return result;
}

int main() {
    MyString text("ababcababcabc");
    MyString pattern("abc");

    std::vector<int> matches = reverseKMP(text, pattern);

    std::cout << "Pattern found at indices: ";
    for (int index : matches) {
        std::cout << index << " ";
    }
    std::cout << std::endl;

    return 0;
}
