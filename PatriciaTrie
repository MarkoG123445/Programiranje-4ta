#include <iostream>
#include <unordered_map>
#include <string>

class PatriciaTrieNode {
public:
    std::unordered_map<char, PatriciaTrieNode*> children;
    bool isEndOfWord;

    PatriciaTrieNode() : isEndOfWord(false) {}
};

class PatriciaTrie {
private:
    PatriciaTrieNode* root;


    void insertUtil(PatriciaTrieNode* node, const std::string& word, int index) {
        if (index == word.length()) {
            node->isEndOfWord = true;
            return;
        }

        char currentChar = word[index];

        if (node->children.find(currentChar) == node->children.end()) {
            node->children[currentChar] = new PatriciaTrieNode();
        }

        insertUtil(node->children[currentChar], word, index + 1);
    }

 
    bool searchUtil(PatriciaTrieNode* node, const std::string& word, int index) {
        if (index == word.length()) {
            return node->isEndOfWord;
        }

        char currentChar = word[index];

        if (node->children.find(currentChar) == node->children.end()) {
            return false;
        }

        return searchUtil(node->children[currentChar], word, index + 1);
    }

public:
    PatriciaTrie() {
        root = new PatriciaTrieNode();
    }

    ~PatriciaTrie() {
        // Destructor to free memory (not implemented for brevity)
    }

    void insert(const std::string& word) {
        insertUtil(root, word, 0);
    }

    bool search(const std::string& word) {
        return searchUtil(root, word, 0);
    }
};

int main() {
    PatriciaTrie trie;

    trie.insert("hello");
    trie.insert("helicopter");
    trie.insert("helicoptering");
    trie.insert("hi");

    std::cout << "Searching for 'hello': " << (trie.search("hello") ? "Found" : "Not Found") << std::endl;
    std::cout << "Searching for 'helicopter': " << (trie.search("helicopter") ? "Found" : "Not Found") << std::endl;
    std::cout << "Searching for 'helicoptering': " << (trie.search("helicoptering") ? "Found" : "Not Found") << std::endl;
    std::cout << "Searching for 'hi': " << (trie.search("hi") ? "Found" : "Not Found") << std::endl;
    std::cout << "Searching for 'hell': " << (trie.search("hell") ? "Found" : "Not Found") << std::endl;

    return 0;
}
